package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StockLevelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelAllPropertiesEquals(StockLevel expected, StockLevel actual) {
        assertStockLevelAutoGeneratedPropertiesEquals(expected, actual);
        assertStockLevelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelAllUpdatablePropertiesEquals(StockLevel expected, StockLevel actual) {
        assertStockLevelUpdatableFieldsEquals(expected, actual);
        assertStockLevelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelAutoGeneratedPropertiesEquals(StockLevel expected, StockLevel actual) {
        assertThat(expected)
            .as("Verify StockLevel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelUpdatableFieldsEquals(StockLevel expected, StockLevel actual) {
        assertThat(expected)
            .as("Verify StockLevel relevant properties")
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()))
            .satisfies(e -> assertThat(e.getRemainingQuantity()).as("check remainingQuantity").isEqualTo(actual.getRemainingQuantity()))
            .satisfies(
                e ->
                    assertThat(e.getCommonAttributesDetailsJSON())
                        .as("check commonAttributesDetailsJSON")
                        .isEqualTo(actual.getCommonAttributesDetailsJSON())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelUpdatableRelationshipsEquals(StockLevel expected, StockLevel actual) {
        assertThat(expected)
            .as("Verify StockLevel relationships")
            .satisfies(e -> assertThat(e.getWarehouse()).as("check warehouse").isEqualTo(actual.getWarehouse()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
