package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InventoryTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionAllPropertiesEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertInventoryTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionAllUpdatablePropertiesEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertInventoryTransactionUpdatableFieldsEquals(expected, actual);
        assertInventoryTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionAutoGeneratedPropertiesEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertThat(expected)
            .as("Verify InventoryTransaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionUpdatableFieldsEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertThat(expected)
            .as("Verify InventoryTransaction relevant properties")
            .satisfies(e -> assertThat(e.getInvoiceId()).as("check invoiceId").isEqualTo(actual.getInvoiceId()))
            .satisfies(
                e ->
                    assertThat(e.getTransactionCreatedDate())
                        .as("check transactionCreatedDate")
                        .isEqualTo(actual.getTransactionCreatedDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getTransactionModifiedDate())
                        .as("check transactionModifiedDate")
                        .isEqualTo(actual.getTransactionModifiedDate())
            )
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(
                e -> assertThat(e.getTransactionComments()).as("check transactionComments").isEqualTo(actual.getTransactionComments())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionUpdatableRelationshipsEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertThat(expected)
            .as("Verify InventoryTransaction relationships")
            .satisfies(e -> assertThat(e.getSupplier()).as("check supplier").isEqualTo(actual.getSupplier()))
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getWarehouse()).as("check warehouse").isEqualTo(actual.getWarehouse()));
    }
}
