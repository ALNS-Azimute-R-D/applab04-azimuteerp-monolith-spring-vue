package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dexterity.darueira.azimuteerp.monolith.springvue.domain.AssertUtils.bigDecimalCompareTo;

public class EventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllPropertiesEquals(Event expected, Event actual) {
        assertEventAutoGeneratedPropertiesEquals(expected, actual);
        assertEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllUpdatablePropertiesEquals(Event expected, Event actual) {
        assertEventUpdatableFieldsEquals(expected, actual);
        assertEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAutoGeneratedPropertiesEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableFieldsEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event relevant properties")
            .satisfies(e -> assertThat(e.getAcronym()).as("check acronym").isEqualTo(actual.getAcronym()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getFullDescription()).as("check fullDescription").isEqualTo(actual.getFullDescription()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(
                e ->
                    assertThat(e.getDefaultTicketValue())
                        .as("check defaultTicketValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDefaultTicketValue())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableRelationshipsEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event relationships")
            .satisfies(e -> assertThat(e.getMainVenue()).as("check mainVenue").isEqualTo(actual.getMainVenue()))
            .satisfies(e -> assertThat(e.getTypeOfEvent()).as("check typeOfEvent").isEqualTo(actual.getTypeOfEvent()))
            .satisfies(e -> assertThat(e.getPromoteurPerson()).as("check promoteurPerson").isEqualTo(actual.getPromoteurPerson()))
            .satisfies(e -> assertThat(e.getAssetCollections()).as("check assetCollections").isEqualTo(actual.getAssetCollections()));
    }
}
