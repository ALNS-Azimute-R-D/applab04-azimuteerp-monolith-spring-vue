package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TenantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAllPropertiesEquals(Tenant expected, Tenant actual) {
        assertTenantAutoGeneratedPropertiesEquals(expected, actual);
        assertTenantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAllUpdatablePropertiesEquals(Tenant expected, Tenant actual) {
        assertTenantUpdatableFieldsEquals(expected, actual);
        assertTenantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAutoGeneratedPropertiesEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantUpdatableFieldsEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant relevant properties")
            .satisfies(e -> assertThat(e.getAcronym()).as("check acronym").isEqualTo(actual.getAcronym()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(
                e -> assertThat(e.getCustomerBusinessCode()).as("check customerBusinessCode").isEqualTo(actual.getCustomerBusinessCode())
            )
            .satisfies(
                e -> assertThat(e.getBusinessHandlerClazz()).as("check businessHandlerClazz").isEqualTo(actual.getBusinessHandlerClazz())
            )
            .satisfies(
                e ->
                    assertThat(e.getMainContactPersonDetailsJSON())
                        .as("check mainContactPersonDetailsJSON")
                        .isEqualTo(actual.getMainContactPersonDetailsJSON())
            )
            .satisfies(e -> assertThat(e.getBillingDetailsJSON()).as("check billingDetailsJSON").isEqualTo(actual.getBillingDetailsJSON()))
            .satisfies(
                e ->
                    assertThat(e.getTechnicalEnvironmentsDetailsJSON())
                        .as("check technicalEnvironmentsDetailsJSON")
                        .isEqualTo(actual.getTechnicalEnvironmentsDetailsJSON())
            )
            .satisfies(
                e ->
                    assertThat(e.getCustomAttributesDetailsJSON())
                        .as("check customAttributesDetailsJSON")
                        .isEqualTo(actual.getCustomAttributesDetailsJSON())
            )
            .satisfies(e -> assertThat(e.getLogoImg()).as("check logoImg").isEqualTo(actual.getLogoImg()))
            .satisfies(
                e -> assertThat(e.getLogoImgContentType()).as("check logoImg contenty type").isEqualTo(actual.getLogoImgContentType())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantUpdatableRelationshipsEquals(Tenant expected, Tenant actual) {}
}
