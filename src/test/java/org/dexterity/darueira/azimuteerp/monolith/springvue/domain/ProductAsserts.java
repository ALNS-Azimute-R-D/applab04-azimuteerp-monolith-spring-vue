package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dexterity.darueira.azimuteerp.monolith.springvue.domain.AssertUtils.bigDecimalCompareTo;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getProductSKU()).as("check productSKU").isEqualTo(actual.getProductSKU()))
            .satisfies(e -> assertThat(e.getProductName()).as("check productName").isEqualTo(actual.getProductName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(
                e ->
                    assertThat(e.getStandardCost())
                        .as("check standardCost")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getStandardCost())
            )
            .satisfies(
                e ->
                    assertThat(e.getListPrice()).as("check listPrice").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getListPrice())
            )
            .satisfies(e -> assertThat(e.getReorderLevel()).as("check reorderLevel").isEqualTo(actual.getReorderLevel()))
            .satisfies(e -> assertThat(e.getTargetLevel()).as("check targetLevel").isEqualTo(actual.getTargetLevel()))
            .satisfies(e -> assertThat(e.getQuantityPerUnit()).as("check quantityPerUnit").isEqualTo(actual.getQuantityPerUnit()))
            .satisfies(e -> assertThat(e.getDiscontinued()).as("check discontinued").isEqualTo(actual.getDiscontinued()))
            .satisfies(
                e ->
                    assertThat(e.getMinimumReorderQuantity())
                        .as("check minimumReorderQuantity")
                        .isEqualTo(actual.getMinimumReorderQuantity())
            )
            .satisfies(e -> assertThat(e.getSuggestedCategory()).as("check suggestedCategory").isEqualTo(actual.getSuggestedCategory()))
            .satisfies(e -> assertThat(e.getAttachments()).as("check attachments").isEqualTo(actual.getAttachments()))
            .satisfies(
                e ->
                    assertThat(e.getAttachmentsContentType())
                        .as("check attachments contenty type")
                        .isEqualTo(actual.getAttachmentsContentType())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relationships")
            .satisfies(e -> assertThat(e.getBrand()).as("check brand").isEqualTo(actual.getBrand()))
            .satisfies(e -> assertThat(e.getToSuppliers()).as("check toSuppliers").isEqualTo(actual.getToSuppliers()));
    }
}
