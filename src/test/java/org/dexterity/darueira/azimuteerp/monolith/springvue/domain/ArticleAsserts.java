package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dexterity.darueira.azimuteerp.monolith.springvue.domain.AssertUtils.bigDecimalCompareTo;

public class ArticleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleAllPropertiesEquals(Article expected, Article actual) {
        assertArticleAutoGeneratedPropertiesEquals(expected, actual);
        assertArticleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleAllUpdatablePropertiesEquals(Article expected, Article actual) {
        assertArticleUpdatableFieldsEquals(expected, actual);
        assertArticleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleAutoGeneratedPropertiesEquals(Article expected, Article actual) {
        assertThat(expected)
            .as("Verify Article auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleUpdatableFieldsEquals(Article expected, Article actual) {
        assertThat(expected)
            .as("Verify Article relevant properties")
            .satisfies(e -> assertThat(e.getInventoryProductId()).as("check inventoryProductId").isEqualTo(actual.getInventoryProductId()))
            .satisfies(e -> assertThat(e.getSkuCode()).as("check skuCode").isEqualTo(actual.getSkuCode()))
            .satisfies(e -> assertThat(e.getCustomName()).as("check customName").isEqualTo(actual.getCustomName()))
            .satisfies(e -> assertThat(e.getCustomDescription()).as("check customDescription").isEqualTo(actual.getCustomDescription()))
            .satisfies(
                e ->
                    assertThat(e.getPriceValue())
                        .as("check priceValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPriceValue())
            )
            .satisfies(e -> assertThat(e.getItemSize()).as("check itemSize").isEqualTo(actual.getItemSize()))
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleUpdatableRelationshipsEquals(Article expected, Article actual) {
        assertThat(expected)
            .as("Verify Article relationships")
            .satisfies(e -> assertThat(e.getAssetCollections()).as("check assetCollections").isEqualTo(actual.getAssetCollections()))
            .satisfies(e -> assertThat(e.getMainCategory()).as("check mainCategory").isEqualTo(actual.getMainCategory()));
    }
}
