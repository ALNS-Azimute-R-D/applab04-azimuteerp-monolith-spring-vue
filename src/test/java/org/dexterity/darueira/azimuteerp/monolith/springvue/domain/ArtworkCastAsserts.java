package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArtworkCastAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtworkCastAllPropertiesEquals(ArtworkCast expected, ArtworkCast actual) {
        assertArtworkCastAutoGeneratedPropertiesEquals(expected, actual);
        assertArtworkCastAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtworkCastAllUpdatablePropertiesEquals(ArtworkCast expected, ArtworkCast actual) {
        assertArtworkCastUpdatableFieldsEquals(expected, actual);
        assertArtworkCastUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtworkCastAutoGeneratedPropertiesEquals(ArtworkCast expected, ArtworkCast actual) {
        assertThat(expected)
            .as("Verify ArtworkCast auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtworkCastUpdatableFieldsEquals(ArtworkCast expected, ArtworkCast actual) {
        assertThat(expected)
            .as("Verify ArtworkCast relevant properties")
            .satisfies(e -> assertThat(e.getOrderOfAppearance()).as("check orderOfAppearance").isEqualTo(actual.getOrderOfAppearance()))
            .satisfies(e -> assertThat(e.getCharacterName()).as("check characterName").isEqualTo(actual.getCharacterName()))
            .satisfies(e -> assertThat(e.getMainAssetUUID()).as("check mainAssetUUID").isEqualTo(actual.getMainAssetUUID()))
            .satisfies(
                e -> assertThat(e.getCharacterDetailsJSON()).as("check characterDetailsJSON").isEqualTo(actual.getCharacterDetailsJSON())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtworkCastUpdatableRelationshipsEquals(ArtworkCast expected, ArtworkCast actual) {
        assertThat(expected)
            .as("Verify ArtworkCast relationships")
            .satisfies(e -> assertThat(e.getArtwork()).as("check artwork").isEqualTo(actual.getArtwork()))
            .satisfies(e -> assertThat(e.getArtist()).as("check artist").isEqualTo(actual.getArtist()));
    }
}
