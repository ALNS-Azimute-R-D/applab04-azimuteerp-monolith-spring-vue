package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAllPropertiesEquals(Person expected, Person actual) {
        assertPersonAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAllUpdatablePropertiesEquals(Person expected, Person actual) {
        assertPersonUpdatableFieldsEquals(expected, actual);
        assertPersonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAutoGeneratedPropertiesEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonUpdatableFieldsEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person relevant properties")
            .satisfies(e -> assertThat(e.getFirstname()).as("check firstname").isEqualTo(actual.getFirstname()))
            .satisfies(e -> assertThat(e.getLastname()).as("check lastname").isEqualTo(actual.getLastname()))
            .satisfies(e -> assertThat(e.getFullname()).as("check fullname").isEqualTo(actual.getFullname()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getCodeBI()).as("check codeBI").isEqualTo(actual.getCodeBI()))
            .satisfies(e -> assertThat(e.getCodeNIF()).as("check codeNIF").isEqualTo(actual.getCodeNIF()))
            .satisfies(e -> assertThat(e.getStreetAddress()).as("check streetAddress").isEqualTo(actual.getStreetAddress()))
            .satisfies(e -> assertThat(e.getHouseNumber()).as("check houseNumber").isEqualTo(actual.getHouseNumber()))
            .satisfies(e -> assertThat(e.getLocationName()).as("check locationName").isEqualTo(actual.getLocationName()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getMainEmail()).as("check mainEmail").isEqualTo(actual.getMainEmail()))
            .satisfies(e -> assertThat(e.getLandPhoneNumber()).as("check landPhoneNumber").isEqualTo(actual.getLandPhoneNumber()))
            .satisfies(e -> assertThat(e.getMobilePhoneNumber()).as("check mobilePhoneNumber").isEqualTo(actual.getMobilePhoneNumber()))
            .satisfies(e -> assertThat(e.getOccupation()).as("check occupation").isEqualTo(actual.getOccupation()))
            .satisfies(e -> assertThat(e.getPreferredLanguage()).as("check preferredLanguage").isEqualTo(actual.getPreferredLanguage()))
            .satisfies(e -> assertThat(e.getUsernameInOAuth2()).as("check usernameInOAuth2").isEqualTo(actual.getUsernameInOAuth2()))
            .satisfies(e -> assertThat(e.getUserIdInOAuth2()).as("check userIdInOAuth2").isEqualTo(actual.getUserIdInOAuth2()))
            .satisfies(
                e ->
                    assertThat(e.getCustomAttributesDetailsJSON())
                        .as("check customAttributesDetailsJSON")
                        .isEqualTo(actual.getCustomAttributesDetailsJSON())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()))
            .satisfies(e -> assertThat(e.getAvatarImg()).as("check avatarImg").isEqualTo(actual.getAvatarImg()))
            .satisfies(
                e -> assertThat(e.getAvatarImgContentType()).as("check avatarImg contenty type").isEqualTo(actual.getAvatarImgContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonUpdatableRelationshipsEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person relationships")
            .satisfies(e -> assertThat(e.getTypeOfPerson()).as("check typeOfPerson").isEqualTo(actual.getTypeOfPerson()))
            .satisfies(e -> assertThat(e.getDistrict()).as("check district").isEqualTo(actual.getDistrict()))
            .satisfies(e -> assertThat(e.getManagerPerson()).as("check managerPerson").isEqualTo(actual.getManagerPerson()));
    }
}
