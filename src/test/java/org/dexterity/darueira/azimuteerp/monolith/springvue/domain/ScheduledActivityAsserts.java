package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ScheduledActivityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduledActivityAllPropertiesEquals(ScheduledActivity expected, ScheduledActivity actual) {
        assertScheduledActivityAutoGeneratedPropertiesEquals(expected, actual);
        assertScheduledActivityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduledActivityAllUpdatablePropertiesEquals(ScheduledActivity expected, ScheduledActivity actual) {
        assertScheduledActivityUpdatableFieldsEquals(expected, actual);
        assertScheduledActivityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduledActivityAutoGeneratedPropertiesEquals(ScheduledActivity expected, ScheduledActivity actual) {
        assertThat(expected)
            .as("Verify ScheduledActivity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduledActivityUpdatableFieldsEquals(ScheduledActivity expected, ScheduledActivity actual) {
        assertThat(expected)
            .as("Verify ScheduledActivity relevant properties")
            .satisfies(e -> assertThat(e.getCustomizedName()).as("check customizedName").isEqualTo(actual.getCustomizedName()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getNumberOfAttendees()).as("check numberOfAttendees").isEqualTo(actual.getNumberOfAttendees()))
            .satisfies(
                e ->
                    assertThat(e.getAverageEvaluationInStars())
                        .as("check averageEvaluationInStars")
                        .isEqualTo(actual.getAverageEvaluationInStars())
            )
            .satisfies(
                e ->
                    assertThat(e.getCustomAttributtesDetailsJSON())
                        .as("check customAttributtesDetailsJSON")
                        .isEqualTo(actual.getCustomAttributtesDetailsJSON())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheduledActivityUpdatableRelationshipsEquals(ScheduledActivity expected, ScheduledActivity actual) {
        assertThat(expected)
            .as("Verify ScheduledActivity relationships")
            .satisfies(e -> assertThat(e.getProgram()).as("check program").isEqualTo(actual.getProgram()))
            .satisfies(e -> assertThat(e.getActivity()).as("check activity").isEqualTo(actual.getActivity()))
            .satisfies(e -> assertThat(e.getResponsiblePerson()).as("check responsiblePerson").isEqualTo(actual.getResponsiblePerson()))
            .satisfies(e -> assertThat(e.getAssetCollections()).as("check assetCollections").isEqualTo(actual.getAssetCollections()));
    }
}
