package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EventAttendeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAttendeeAllPropertiesEquals(EventAttendee expected, EventAttendee actual) {
        assertEventAttendeeAutoGeneratedPropertiesEquals(expected, actual);
        assertEventAttendeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAttendeeAllUpdatablePropertiesEquals(EventAttendee expected, EventAttendee actual) {
        assertEventAttendeeUpdatableFieldsEquals(expected, actual);
        assertEventAttendeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAttendeeAutoGeneratedPropertiesEquals(EventAttendee expected, EventAttendee actual) {
        assertThat(expected)
            .as("Verify EventAttendee auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAttendeeUpdatableFieldsEquals(EventAttendee expected, EventAttendee actual) {
        assertThat(expected)
            .as("Verify EventAttendee relevant properties")
            .satisfies(e -> assertThat(e.getAttendedAsRole()).as("check attendedAsRole").isEqualTo(actual.getAttendedAsRole()))
            .satisfies(e -> assertThat(e.getWasPresentInEvent()).as("check wasPresentInEvent").isEqualTo(actual.getWasPresentInEvent()))
            .satisfies(e -> assertThat(e.getShouldBuyTicket()).as("check shouldBuyTicket").isEqualTo(actual.getShouldBuyTicket()))
            .satisfies(e -> assertThat(e.getTicketNumber()).as("check ticketNumber").isEqualTo(actual.getTicketNumber()))
            .satisfies(e -> assertThat(e.getSeatNumber()).as("check seatNumber").isEqualTo(actual.getSeatNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAttendeeUpdatableRelationshipsEquals(EventAttendee expected, EventAttendee actual) {
        assertThat(expected)
            .as("Verify EventAttendee relationships")
            .satisfies(e -> assertThat(e.getAttendeePerson()).as("check attendeePerson").isEqualTo(actual.getAttendeePerson()))
            .satisfies(e -> assertThat(e.getEvent()).as("check event").isEqualTo(actual.getEvent()))
            .satisfies(e -> assertThat(e.getTicketPurchased()).as("check ticketPurchased").isEqualTo(actual.getTicketPurchased()));
    }
}
