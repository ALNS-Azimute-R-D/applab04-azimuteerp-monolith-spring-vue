package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dexterity.darueira.azimuteerp.monolith.springvue.domain.AssertUtils.bigDecimalCompareTo;

public class InvoiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAllPropertiesEquals(Invoice expected, Invoice actual) {
        assertInvoiceAutoGeneratedPropertiesEquals(expected, actual);
        assertInvoiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAllUpdatablePropertiesEquals(Invoice expected, Invoice actual) {
        assertInvoiceUpdatableFieldsEquals(expected, actual);
        assertInvoiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAutoGeneratedPropertiesEquals(Invoice expected, Invoice actual) {
        assertThat(expected)
            .as("Verify Invoice auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceUpdatableFieldsEquals(Invoice expected, Invoice actual) {
        assertThat(expected)
            .as("Verify Invoice relevant properties")
            .satisfies(e -> assertThat(e.getBusinessCode()).as("check businessCode").isEqualTo(actual.getBusinessCode()))
            .satisfies(e -> assertThat(e.getInvoiceDate()).as("check invoiceDate").isEqualTo(actual.getInvoiceDate()))
            .satisfies(e -> assertThat(e.getDueDate()).as("check dueDate").isEqualTo(actual.getDueDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(
                e -> assertThat(e.getTaxValue()).as("check taxValue").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTaxValue())
            )
            .satisfies(
                e ->
                    assertThat(e.getShippingValue())
                        .as("check shippingValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getShippingValue())
            )
            .satisfies(
                e ->
                    assertThat(e.getAmountDueValue())
                        .as("check amountDueValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAmountDueValue())
            )
            .satisfies(
                e ->
                    assertThat(e.getNumberOfInstallmentsOriginal())
                        .as("check numberOfInstallmentsOriginal")
                        .isEqualTo(actual.getNumberOfInstallmentsOriginal())
            )
            .satisfies(
                e ->
                    assertThat(e.getNumberOfInstallmentsPaid())
                        .as("check numberOfInstallmentsPaid")
                        .isEqualTo(actual.getNumberOfInstallmentsPaid())
            )
            .satisfies(
                e ->
                    assertThat(e.getAmountPaidValue())
                        .as("check amountPaidValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAmountPaidValue())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getCustomAttributesDetailsJSON())
                        .as("check customAttributesDetailsJSON")
                        .isEqualTo(actual.getCustomAttributesDetailsJSON())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceUpdatableRelationshipsEquals(Invoice expected, Invoice actual) {
        assertThat(expected)
            .as("Verify Invoice relationships")
            .satisfies(
                e ->
                    assertThat(e.getPreferrablePaymentGateway())
                        .as("check preferrablePaymentGateway")
                        .isEqualTo(actual.getPreferrablePaymentGateway())
            );
    }
}
