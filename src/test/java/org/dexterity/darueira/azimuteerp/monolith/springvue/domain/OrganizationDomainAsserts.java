package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrganizationDomainAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationDomainAllPropertiesEquals(OrganizationDomain expected, OrganizationDomain actual) {
        assertOrganizationDomainAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganizationDomainAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationDomainAllUpdatablePropertiesEquals(OrganizationDomain expected, OrganizationDomain actual) {
        assertOrganizationDomainUpdatableFieldsEquals(expected, actual);
        assertOrganizationDomainUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationDomainAutoGeneratedPropertiesEquals(OrganizationDomain expected, OrganizationDomain actual) {
        assertThat(expected)
            .as("Verify OrganizationDomain auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationDomainUpdatableFieldsEquals(OrganizationDomain expected, OrganizationDomain actual) {
        assertThat(expected)
            .as("Verify OrganizationDomain relevant properties")
            .satisfies(e -> assertThat(e.getDomainAcronym()).as("check domainAcronym").isEqualTo(actual.getDomainAcronym()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getIsVerified()).as("check isVerified").isEqualTo(actual.getIsVerified()))
            .satisfies(
                e -> assertThat(e.getBusinessHandlerClazz()).as("check businessHandlerClazz").isEqualTo(actual.getBusinessHandlerClazz())
            )
            .satisfies(e -> assertThat(e.getActivationStatus()).as("check activationStatus").isEqualTo(actual.getActivationStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationDomainUpdatableRelationshipsEquals(OrganizationDomain expected, OrganizationDomain actual) {
        assertThat(expected)
            .as("Verify OrganizationDomain relationships")
            .satisfies(e -> assertThat(e.getOrganization()).as("check organization").isEqualTo(actual.getOrganization()));
    }
}
