package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RawAssetProcTmpAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpAllPropertiesEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertRawAssetProcTmpAutoGeneratedPropertiesEquals(expected, actual);
        assertRawAssetProcTmpAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpAllUpdatablePropertiesEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertRawAssetProcTmpUpdatableFieldsEquals(expected, actual);
        assertRawAssetProcTmpUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpAutoGeneratedPropertiesEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertThat(expected)
            .as("Verify RawAssetProcTmp auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpUpdatableFieldsEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertThat(expected)
            .as("Verify RawAssetProcTmp relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(
                e -> assertThat(e.getStatusRawProcessing()).as("check statusRawProcessing").isEqualTo(actual.getStatusRawProcessing())
            )
            .satisfies(e -> assertThat(e.getFullFilenamePath()).as("check fullFilenamePath").isEqualTo(actual.getFullFilenamePath()))
            .satisfies(
                e -> assertThat(e.getAssetRawContentAsBlob()).as("check assetRawContentAsBlob").isEqualTo(actual.getAssetRawContentAsBlob())
            )
            .satisfies(
                e ->
                    assertThat(e.getAssetRawContentAsBlobContentType())
                        .as("check assetRawContentAsBlob contenty type")
                        .isEqualTo(actual.getAssetRawContentAsBlobContentType())
            )
            .satisfies(
                e ->
                    assertThat(e.getCustomAttributesDetailsJSON())
                        .as("check customAttributesDetailsJSON")
                        .isEqualTo(actual.getCustomAttributesDetailsJSON())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpUpdatableRelationshipsEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertThat(expected)
            .as("Verify RawAssetProcTmp relationships")
            .satisfies(e -> assertThat(e.getAssetType()).as("check assetType").isEqualTo(actual.getAssetType()));
    }
}
