package org.dexterity.darueira.azimuteerp.monolith.springvue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VenueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAllPropertiesEquals(Venue expected, Venue actual) {
        assertVenueAutoGeneratedPropertiesEquals(expected, actual);
        assertVenueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAllUpdatablePropertiesEquals(Venue expected, Venue actual) {
        assertVenueUpdatableFieldsEquals(expected, actual);
        assertVenueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAutoGeneratedPropertiesEquals(Venue expected, Venue actual) {
        assertThat(expected)
            .as("Verify Venue auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueUpdatableFieldsEquals(Venue expected, Venue actual) {
        assertThat(expected)
            .as("Verify Venue relevant properties")
            .satisfies(e -> assertThat(e.getAcronym()).as("check acronym").isEqualTo(actual.getAcronym()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getGeoPointLocation()).as("check geoPointLocation").isEqualTo(actual.getGeoPointLocation()))
            .satisfies(
                e ->
                    assertThat(e.getGeoPointLocationContentType())
                        .as("check geoPointLocation contenty type")
                        .isEqualTo(actual.getGeoPointLocationContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueUpdatableRelationshipsEquals(Venue expected, Venue actual) {
        assertThat(expected)
            .as("Verify Venue relationships")
            .satisfies(e -> assertThat(e.getTypeOfVenue()).as("check typeOfVenue").isEqualTo(actual.getTypeOfVenue()))
            .satisfies(e -> assertThat(e.getCommonLocality()).as("check commonLocality").isEqualTo(actual.getCommonLocality()));
    }
}
